{"ast":null,"code":"import { NEW_RESERVATION, FETCHED } from './types';\nimport history from '../history';\nexport const postReservation = formData => dispatch => {\n  console.log('in Reservation action');\n  fetch('/reserve', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formData)\n  }).then(res => {\n    if (res.ok) {\n      return res.json().then(reserve => dispatch({\n        type: NEW_RESERVATION,\n        payload: reserve\n      }));\n    } else {\n      if (res.status === 400) {\n        return res.json().then(err => window.alert(err.error));\n      }\n    }\n  });\n};\nexport const fetchReservations = () => dispatch => {\n  fetch('/reservations', {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': `${sessionStorage.getItem('token')}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json().then(reservations => dispatch({\n        type: FETCHED,\n        payload: reservations\n      })).then(!sessionStorage.token ? history.push('/login') : null);\n    } // redirects if token is not present. Will not render data if token is not a valid token from server \n\n  });\n};","map":{"version":3,"sources":["/Users/carlosbarrera/projects/Irashiai-Bistro/website/src/Actions/Reservation.js"],"names":["NEW_RESERVATION","FETCHED","history","postReservation","formData","dispatch","console","log","fetch","method","headers","body","JSON","stringify","then","res","ok","json","reserve","type","payload","status","err","window","alert","error","fetchReservations","sessionStorage","getItem","reservations","token","push"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,QAAyC,SAAzC;AACA,OAAOC,OAAP,MAAoB,YAApB;AAGA,OAAO,MAAMC,eAAe,GAAIC,QAAD,IAAcC,QAAQ,IAAI;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAC,EAAAA,KAAK,CAAC,UAAD,EAAa;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFK;AAKdC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,QAAf;AALQ,GAAb,CAAL,CAOCU,IAPD,CAOMC,GAAG,IAAI;AACT,QAAGA,GAAG,CAACC,EAAP,EAAW;AACP,aAAOD,GAAG,CAACE,IAAJ,GACNH,IADM,CACDI,OAAO,IAAIb,QAAQ,CAAC;AACtBc,QAAAA,IAAI,EAAEnB,eADgB;AAEtBoB,QAAAA,OAAO,EAAEF;AAFa,OAAD,CADlB,CAAP;AAMH,KAPD,MAOO;AACH,UAAGH,GAAG,CAACM,MAAJ,KAAe,GAAlB,EAAuB;AACnB,eAAON,GAAG,CAACE,IAAJ,GACNH,IADM,CACDQ,GAAG,IAAIC,MAAM,CAACC,KAAP,CAAaF,GAAG,CAACG,KAAjB,CADN,CAAP;AAEH;AACJ;AACJ,GArBD;AAsBH,CAxBM;AA0BP,OAAO,MAAMC,iBAAiB,GAAG,MAAMrB,QAAQ,IAAI;AAC/CG,EAAAA,KAAK,CAAC,eAAD,EAAkB;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,GAAEiB,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAgC;AAF/C;AAFU,GAAlB,CAAL,CAOCd,IAPD,CAOMC,GAAG,IAAI;AACT,QAAGA,GAAG,CAACC,EAAP,EAAW;AACP,aAAOD,GAAG,CAACE,IAAJ,GACNH,IADM,CACDe,YAAY,IAAIxB,QAAQ,CAAC;AAC3Bc,QAAAA,IAAI,EAAElB,OADqB;AAE3BmB,QAAAA,OAAO,EAAES;AAFkB,OAAD,CADvB,EAMNf,IANM,CAMD,CAACa,cAAc,CAACG,KAAhB,GAAwB5B,OAAO,CAAC6B,IAAR,CAAa,QAAb,CAAxB,GAAiD,IANhD,CAAP;AAOH,KATQ,CAUT;;AACH,GAlBD;AAmBH,CApBM","sourcesContent":["import { NEW_RESERVATION, FETCHED } from './types';\nimport history from '../history';\n\n\nexport const postReservation = (formData) => dispatch => {\n    console.log('in Reservation action');\n    fetch('/reserve', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n    })\n    .then(res => {\n        if(res.ok) {\n            return res.json()\n            .then(reserve => dispatch({\n                type: NEW_RESERVATION,\n                payload: reserve\n                })\n            )\n        } else {\n            if(res.status === 400) {\n                return res.json()\n                .then(err => window.alert(err.error))\n            }\n        }\n    })\n};\n\nexport const fetchReservations = () => dispatch => {\n    fetch('/reservations', {\n        method: 'GET',\n        headers: {\n            'Content-type': 'application/json',\n            'Authorization': `${sessionStorage.getItem('token')}`\n        }\n    })\n    .then(res => {\n        if(res.ok) {\n            return res.json()\n            .then(reservations => dispatch({\n                type: FETCHED,\n                payload: reservations\n            })\n            )\n            .then(!sessionStorage.token ? history.push('/login') : null)\n        } \n        // redirects if token is not present. Will not render data if token is not a valid token from server \n    })\n};\n\n"]},"metadata":{},"sourceType":"module"}